/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.views;

import hr.algebra.dal.RepositoryFactory;
import hr.algebra.dal.models.Movie;
import hr.algebra.dal.models.MovieTableModel;
import hr.algebra.dal.models.Person;
import hr.algebra.utilities.FileUtils;
import static hr.algebra.utilities.FileUtils.copy;
import hr.algebra.utilities.IconUtils;
import hr.algebra.utilities.MessageUtils;
import static hr.algebra.utilities.MessageUtils.showErrorMessage;
import static hr.algebra.utilities.MessageUtils.showInformationMessage;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.ArrayList;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.ListModel;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import static javax.swing.TransferHandler.COPY;

/**
 *
 * @author ljubo
 */
public class MoviePanel extends javax.swing.JPanel {

    /**
     * Creates new form MoviePanel
     */
    private final DefaultListModel<String> destinationModelActors = new DefaultListModel<>();
    private final DefaultListModel<String> destinationModel = new DefaultListModel<>();
    private final DefaultListModel<String> destinationModelDirectors = new DefaultListModel<>();
    public static boolean isMovieSelected = false;
    public static String PHOTO_PATH = "src/main/resources/assets";
    public static String DEFAULT_PHOTO_PATH = "src/main/resources/assets/no_image.png";

    public MoviePanel() {
        initComponents();
        new Thread(() -> {
             LoadData();
        }).start();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpMovies = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableMovies = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lbIcon = new javax.swing.JLabel();
        lbID = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        tfDuration = new javax.swing.JTextField();
        tfDescription = new javax.swing.JTextField();
        btnEditMovie = new javax.swing.JButton();
        btnUploadPhoto = new javax.swing.JButton();
        btnAddMovie = new javax.swing.JButton();
        jspActors = new javax.swing.JScrollPane();
        listActors = new javax.swing.JList<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jspPeople = new javax.swing.JScrollPane();
        listPeople = new javax.swing.JList<>();
        jspDirectors = new javax.swing.JScrollPane();
        listDirectors = new javax.swing.JList<>();
        tfPhotoPath = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1100, 700));
        addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                formHierarchyChanged(evt);
            }
        });

        tableMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMoviesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableMovies);

        jLabel1.setText("ID:");

        jLabel2.setText("Title:");

        jLabel3.setText("Duration:");

        jLabel4.setText("Description:");

        lbIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lbIcon.setMaximumSize(new java.awt.Dimension(800, 556));
        lbIcon.setMinimumSize(new java.awt.Dimension(800, 556));

        tfTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfTitleActionPerformed(evt);
            }
        });

        btnEditMovie.setText("Edit movie");
        btnEditMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditMovieActionPerformed(evt);
            }
        });

        btnUploadPhoto.setText("Upload photo");
        btnUploadPhoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadPhotoActionPerformed(evt);
            }
        });

        btnAddMovie.setText("Add Movie");
        btnAddMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMovieActionPerformed(evt);
            }
        });

        jspActors.setViewportView(listActors);

        jLabel5.setText("Glumci:");

        jLabel6.setText("Directors:");

        jspPeople.setViewportView(listPeople);

        jspDirectors.setViewportView(listDirectors);

        tfPhotoPath.setEditable(false);

        jLabel7.setText("Photo path");

        javax.swing.GroupLayout jpMoviesLayout = new javax.swing.GroupLayout(jpMovies);
        jpMovies.setLayout(jpMoviesLayout);
        jpMoviesLayout.setHorizontalGroup(
            jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpMoviesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpMoviesLayout.createSequentialGroup()
                        .addGroup(jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jpMoviesLayout.createSequentialGroup()
                                .addComponent(btnAddMovie)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnEditMovie)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnUploadPhoto)
                                .addGap(28, 28, 28)
                                .addComponent(jspDirectors, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                                .addComponent(jspActors, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(46, 46, 46)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jpMoviesLayout.createSequentialGroup()
                        .addGroup(jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jpMoviesLayout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tfPhotoPath))
                            .addGroup(jpMoviesLayout.createSequentialGroup()
                                .addGroup(jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbID))
                            .addGroup(jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpMoviesLayout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addGap(12, 12, 12)
                                    .addComponent(tfDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpMoviesLayout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(84, 84, 84))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpMoviesLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jspPeople, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(96, 96, 96)))))
                .addComponent(lbIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jpMoviesLayout.setVerticalGroup(
            jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpMoviesLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpMoviesLayout.createSequentialGroup()
                        .addGroup(jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jpMoviesLayout.createSequentialGroup()
                                .addGroup(jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(lbID))
                                .addGap(18, 18, 18)
                                .addGroup(jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(24, 24, 24)
                                .addGroup(jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addGap(28, 28, 28)
                                .addGroup(jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfPhotoPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7))
                                .addGap(34, 34, 34)
                                .addGroup(jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnAddMovie)
                                    .addComponent(btnEditMovie)
                                    .addComponent(btnUploadPhoto)))
                            .addGroup(jpMoviesLayout.createSequentialGroup()
                                .addComponent(jspPeople, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jpMoviesLayout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(18, 18, 18)
                                        .addComponent(jspActors, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jpMoviesLayout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(18, 18, 18)
                                        .addComponent(jspDirectors, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(15, 15, 15)))
                        .addGap(13, 13, 13)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 60, Short.MAX_VALUE)
                .addComponent(jpMovies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 61, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jpMovies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(112, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formHierarchyChanged
        LoadData();
        clearForm();
        initDragAndDrop();
    }//GEN-LAST:event_formHierarchyChanged

    private void btnAddMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMovieActionPerformed
        if (!movieFormValid()) {
            return;
        }
        try {
            Movie movieData = new Movie();

            movieData.setTitle(tfTitle.getText().trim());
            movieData.setDuration(tfDuration.getText().trim());
            movieData.setDescription(tfDescription.getText().trim());
            movieData.setPhotoPath(tfPhotoPath.getText().trim());

            ListModel modelActors = listActors.getModel();
            ListModel modelDirectors = listDirectors.getModel();

            List<Person> actorsList = new ArrayList<>();
            List<Person> directorsList = new ArrayList<>();

            for (int i = 0; i < modelActors.getSize(); i++) {
                Object o = modelActors.getElementAt(i);
                String data = o.toString();
                String[] peopleData = data.split(" ");
                actorsList.add(new Person(Integer.valueOf(peopleData[0]), peopleData[1]));
            }
            movieData.setActors(actorsList);
            for (int i = 0; i < modelDirectors.getSize(); i++) {
                Object o = modelDirectors.getElementAt(i);
                String data = o.toString();
                String[] peopleData = data.split(" ");
                directorsList.add(new Person(Integer.valueOf(peopleData[0]), peopleData[1]));

            }
            movieData.setDirectors(directorsList);

            int movieID = RepositoryFactory.getRepository().saveMovie(movieData);

            if (movieID > 0) {
                copy(movieData.getPhotoPath(), (PHOTO_PATH + File.separator + getPhotoTitle(movieData.getPhotoPath())));
                showInformationMessage("Success", "New Movie add");
                initTable();
            }

        } catch (Exception ex) {
            Logger.getLogger(MoviePanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnAddMovieActionPerformed

    private void tableMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMoviesMouseClicked
        try {
            int selectedRow = Integer.parseInt(tableMovies.getValueAt(tableMovies.getSelectedRow(), 0).toString());
            Optional<Movie> selectedMovie = RepositoryFactory.getRepository().getMovie(selectedRow);
            if (!selectedMovie.isEmpty()) {
                int movieid = selectedMovie.get().getId();
                lbID.setText(Integer.toString(movieid));
                tfTitle.setText(selectedMovie.get().getTitle());
                tfDuration.setText(selectedMovie.get().getDuration());
                tfDescription.setText(selectedMovie.get().getDescription());

                if (Files.exists(Paths.get(selectedMovie.get().getPhotoPath()))) {
                    tfPhotoPath.setText(selectedMovie.get().getPhotoPath());
                    setIcon(lbIcon, new File(selectedMovie.get().getPhotoPath()));
                }
                destinationModelDirectors.clear();
                destinationModelActors.clear();
                List<Person> selectedMovieActors = RepositoryFactory.getRepository().getMovieActors(selectedRow);
                DefaultListModel<String> actors = new DefaultListModel<>();
                listActors.setModel(actors);
                for (Person actor : selectedMovieActors) {
                    actors.addElement(actor.toString());
                }
                listActors.setModel(actors);
                List<Person> selectedMovieDirectors = RepositoryFactory.getRepository().getMovieDirectors(selectedRow);
                DefaultListModel<String> direcotrs = new DefaultListModel<>();
                listDirectors.setModel(actors);
                for (Person director : selectedMovieDirectors) {
                    direcotrs.addElement(director.toString());
                }
                listDirectors.setModel(direcotrs);
                isMovieSelected = true;
            } else {
                showErrorMessage("Error", "Movies details didnt fatch");
            }

        } catch (Exception ex) {
            Logger.getLogger(MoviePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tableMoviesMouseClicked

    private void btnEditMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditMovieActionPerformed
        try {
            Movie movieUpdateData = new Movie(
                    Integer.valueOf(lbID.getText()),
                    tfTitle.getText().trim(),
                    tfDuration.getText().trim(),
                    tfDescription.getText().trim(),
                    tfPhotoPath.getText().trim()
            );
            int actorsID = 0;
            int directorID = 0;
            copy(movieUpdateData.getPhotoPath(), (PHOTO_PATH + File.separator + getPhotoTitle(movieUpdateData.getPhotoPath())));
            movieUpdateData.setPhotoPath(PHOTO_PATH + File.separator + movieUpdateData.getTitle());
            RepositoryFactory.getRepository().updateMovie(movieUpdateData);
            RepositoryFactory.getRepository().deleteActors(movieUpdateData.getId());
            RepositoryFactory.getRepository().deleteDirectors(movieUpdateData.getId());

            ListModel modelActors = listActors.getModel();
            ListModel modelDirectors = listDirectors.getModel();

            List<Person> actorsList = new ArrayList<>();
            List<Person> directorsList = new ArrayList<>();

            for (int i = 0; i < modelActors.getSize(); i++) {
                Object o = modelActors.getElementAt(i);
                String data = o.toString();
                String[] peopleData = data.split(" ");
                actorsID = RepositoryFactory.getRepository().saveActors(movieUpdateData.getId(), Integer.parseInt(peopleData[0]));
                actorsList.add(new Person(Integer.valueOf(peopleData[0]), peopleData[1]));
            }

            for (int i = 0; i < modelDirectors.getSize(); i++) {
                Object o = modelDirectors.getElementAt(i);
                String data = o.toString();
                String[] peopleData = data.split(" ");
                directorID = RepositoryFactory.getRepository().saveDirectors(movieUpdateData.getId(), Integer.parseInt(peopleData[0]));
                directorsList.add(new Person(Integer.valueOf(peopleData[0]), peopleData[1]));
            }

            initTable();

        } catch (Exception ex) {
            Logger.getLogger(MoviePanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnEditMovieActionPerformed

    private void btnUploadPhotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadPhotoActionPerformed

        File file = FileUtils.uploadFile("Images", "jpg", "jpeg", "png");
        if (file == null) {
            return;
        }
        tfPhotoPath.setText(file.getAbsolutePath());
        setIcon(lbIcon, file);
    }//GEN-LAST:event_btnUploadPhotoActionPerformed

    private void tfTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfTitleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfTitleActionPerformed

    private void setIcon(JLabel label, File file) {
        try {
            label.setIcon(IconUtils.createIcon(file, 450, 250));
        } catch (IOException ex) {
            MessageUtils.showErrorMessage("Error", "Unable to set icon!");
            Logger.getLogger(MoviePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddMovie;
    private javax.swing.JButton btnEditMovie;
    private javax.swing.JButton btnUploadPhoto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jpMovies;
    private javax.swing.JScrollPane jspActors;
    private javax.swing.JScrollPane jspDirectors;
    private javax.swing.JScrollPane jspPeople;
    private javax.swing.JLabel lbID;
    private javax.swing.JLabel lbIcon;
    private javax.swing.JList<String> listActors;
    private javax.swing.JList<String> listDirectors;
    private javax.swing.JList<String> listPeople;
    private javax.swing.JTable tableMovies;
    private javax.swing.JTextField tfDescription;
    private javax.swing.JTextField tfDuration;
    private javax.swing.JTextField tfPhotoPath;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    void LoadPeople() {

        List<Person> peoples;
        try {
            peoples = RepositoryFactory.getRepository().getPeople();
            listPeople.removeAll();
            DefaultListModel<String> list = new DefaultListModel<>();
            for (Person people : peoples) {
                list.addElement(people.toString());
            }
            //peoples.forEach.addElement(people.getName());forEach(people -> {
            //    list.addElement(people.getName());
            //});
            listPeople.setModel(list);
        } catch (Exception ex) {
            Logger.getLogger(MoviePanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void LoadData() {
        LoadPeople();
        initTable();
    }

    private void initDragAndDrop() {
        listPeople.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        listPeople.setDragEnabled(true);
        listPeople.setTransferHandler(new ExportTransferHandler());

        listActors.setDropMode(DropMode.ON);
        listActors.setTransferHandler(new ImportTransferHandler());

        listDirectors.setDropMode(DropMode.ON);
        listDirectors.setTransferHandler(new ImportTransferHandler());
    }

    private void initTable() {
        try {
            List<Movie> movies = RepositoryFactory.getRepository().getMovies();
            //        List<Movie> movies = MovieParser.parse();
            tableMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            tableMovies.setRowHeight(40);
            tableMovies.setAutoCreateRowSorter(true);
            MovieTableModel movieTableModel = new MovieTableModel(movies);
            tableMovies.setModel(movieTableModel);
        } catch (Exception ex) {
            Logger.getLogger(MoviePanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private boolean movieFormValid() {
        return !tfTitle.getText().trim().isEmpty() && !tfDescription.getText().trim().isEmpty() && !tfDuration.getText().trim().isEmpty();
    }

    private void clearForm() {
        lbID.setText("");
        tfTitle.setText("");
        tfDescription.setText("");
        tfDuration.setText("");
        tfPhotoPath.setText("");
        setIcon(lbIcon, new File(DEFAULT_PHOTO_PATH));
        destinationModelDirectors.clear();
        destinationModelActors.clear();
        listDirectors.setModel(destinationModelDirectors);
        listActors.setModel(destinationModelActors);

    }

    private class ExportTransferHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            // defines icon shown in target before drop
            return COPY;
            //return MOVE;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new StringSelection(listPeople.getSelectedValue());
        }
    }

    private class ImportTransferHandler extends TransferHandler {

        // we define whether we can import stringFlavor that we need for JList<String>
        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(DataFlavor.stringFlavor);
        }

        // we import the data
        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            try {
                Transferable transferable = support.getTransferable();

                String data = (String) transferable.getTransferData(DataFlavor.stringFlavor);

                if (support.getComponent() == listActors) {
                    if (!destinationModel.contains(data)) {
                        destinationModelActors.addElement(data);
                        listActors.setModel(destinationModelActors);
                        return true;
                    }
                } else if (support.getComponent() == listDirectors) {
                    if (!destinationModel.contains(data)) {
                        destinationModelDirectors.addElement(data);
                        listDirectors.setModel(destinationModelDirectors);
                        return true;
                    }
                }

            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(MoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }
    }

    private String getPhotoTitle(String photoPath) {
        String[] splitetPath = photoPath.split("/");
        return splitetPath[splitetPath.length - 1];

    }
}
